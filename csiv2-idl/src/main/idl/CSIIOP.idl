/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

#ifndef _CSIIOP_IDL_
#define _CSIIOP_IDL_
#include <IOP.idl>
#include <CSI.idl>
    
#pragma prefix "omg.org"
    
module CSIIOP {

    const IOP::ComponentId TAG_NULL_TAG = 34; 
    const IOP::ComponentId TAG_CSI_SEC_MECH_LIST = 33;

    // Association options
    
    typedef unsigned short AssociationOptions;
   
    const AssociationOptions NoProtection = 1;
    const AssociationOptions Integrity = 2;     
    const AssociationOptions Confidentiality = 4; 
    const AssociationOptions DetectReplay = 8;     
    const AssociationOptions DetectMisordering = 16;
    const AssociationOptions EstablishTrustInTarget = 32; 
    const AssociationOptions EstablishTrustInClient = 64;
    const AssociationOptions NoDelegation = 128;
    const AssociationOptions SimpleDelegation = 256; 
    const AssociationOptions CompositeDelegation = 512;
    const AssociationOptions IdentityAssertion = 1024;
    const AssociationOptions DelegationByClient = 2048;
    
    // The high order 20-bits of each ServiceConfigurationSyntax constant
    // shall contain the Vendor Minor Codeset ID (VMCID) of the
    // organization that defined the syntax. The low order 12 bits shall
    // contain the organization-scoped syntax identifier. The high-order 20
    // bits of all syntaxes defined by the OMG shall contain the VMCID
    // allocated to the OMG (that is, 0x4F4D0).

    typedef unsigned long ServiceConfigurationSyntax;

    const ServiceConfigurationSyntax SCS_GeneralNames = CSI::OMGVMCID | 0;
    const ServiceConfigurationSyntax SCS_GSSExportedName = CSI::OMGVMCID | 1;
      
    typedef sequence <octet> ServiceSpecificName;

    // The name field of the ServiceConfiguration structure identifies a
    // privilege authority in the format identified in the syntax field. If the
    // syntax is SCS_GeneralNames, the name field contains an ASN.1 (BER)
    // SEQUENCE [1..MAX] OF GeneralName, as defined by the type GeneralNames in
    // [IETF RFC 2459]. If the syntax is SCS_GSSExportedName, the name field 
    // contains a GSS exported name encoded according to the rules in 
    // [IETF RFC 2743] Section 3.2, "Mechanism-Independent Exported Name
    // Object Format," p. 84.

    struct ServiceConfiguration {
        ServiceConfigurationSyntax syntax;
        ServiceSpecificName name;
    };

    typedef sequence <ServiceConfiguration> ServiceConfigurationList;

    // The body of the TAG_NULL_TAG component is a sequence of octets of
    // length 0.

    // type used to define AS layer functionality within a compound mechanism
    // definition
      
    struct AS_ContextSec {
        AssociationOptions target_supports;
        AssociationOptions target_requires;
        CSI::OID client_authentication_mech;
        CSI::GSS_NT_ExportedName target_name;
    };

    // type used to define SAS layer functionality within a compound mechanism
    // definition
 
    struct SAS_ContextSec {
        AssociationOptions target_supports;
        AssociationOptions target_requires;
        ServiceConfigurationList  privilege_authorities;
        CSI::OIDList supported_naming_mechanisms;
        CSI::IdentityTokenType supported_identity_types;
    };

    // type used in the body of a TAG_CSI_SEC_MECH_LIST component to
    // describe a compound mechanism
      
    struct CompoundSecMech {
        AssociationOptions target_requires;
        IOP::TaggedComponent transport_mech;
        AS_ContextSec as_context_mech;
        SAS_ContextSec sas_context_mech;
    };

    typedef sequence <CompoundSecMech> CompoundSecMechanisms;

    // type corresponding to the body of a TAG_CSI_SEC_MECH_LIST 
    // component
      
    struct CompoundSecMechList {
        boolean stateful;
        CompoundSecMechanisms  mechanism_list;
    };

    struct TransportAddress {
        string host_name;
        unsigned short port;
    };

    typedef sequence <TransportAddress> TransportAddressList;

    // Tagged component for configuring SECIOP as a CSIv2 transport mechanism

    const IOP::ComponentId TAG_SECIOP_SEC_TRANS = 35;

    struct SECIOP_SEC_TRANS {
        AssociationOptions target_supports;
        AssociationOptions target_requires;
        CSI::OID mech_oid;
        CSI::GSS_NT_ExportedName target_name;
        TransportAddressList addresses;
    };

    // tagged component for configuring TLS/SSL as a CSIv2 transport mechanism

    const IOP::ComponentId TAG_TLS_SEC_TRANS = 36;

    struct TLS_SEC_TRANS {
        AssociationOptions target_supports;
        AssociationOptions target_requires;
        TransportAddressList addresses;
    };

}; //CSIIOP

#endif
