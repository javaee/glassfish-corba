/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

////////////////////////////////
// IDL file.
////////////////////////////////

////////////////////////
// Constant declarations
////////////////////////

// boolean type

const boolean boolean_value = TRUE;

// octet type

const octet octet_value = 0xFF;

// char types

const char char_value = '\xFF';

const wchar wchar_value = L'\u5ae6';

// string types

const string string_value = "A""B""C";

const wstring wstring_value = L"\u0ae6""H""E""L""L""O";

// integer types

// -(2^15)
const short short_value = -32768;

// (2^16)-1
const unsigned short unsigned_short_value = 65535;

// -(2^31)
const long long_value = -2147483648;

// (2^32)-1
const unsigned long unsigned_long_value = 4294967295;

// -(2^63)
const long long long_long_value = -9223372036854775808;

// Java can't handle (2^63)+1. It will be converted to -((2^63)-1)
const unsigned long long unsigned_long_long_value = 9223372036854775809; 

// enum type

enum Color { red, green, blue };
union ColorCount switch (Color) {
    case red :
        unsigned long x;
    case green :
        unsigned long y;
    case blue :
        unsigned long z;
};


//////////////////////////////////////////////
// Constant declarations with type definitions
//////////////////////////////////////////////

// boolean type

typedef boolean boolean_type;
const boolean_type boolean_value_t = TRUE;

// octet type

typedef octet octet_type;
const octet_type octet_value_t = 0xFF;

// char types

typedef char char_type;
const char_type char_value_t = '\xFF';

typedef wchar wchar_type;
const wchar_type wchar_value_t = L'\u5ae6';

// string types

typedef string string_type;
const string_type string_value_t = "A""B""C";

typedef wstring wstring_type;
const wstring_type wstring_value_t = L"\u0ae6""H""E""L""L""O";

// integer types

// -(2^15)
typedef short short_type;
const short_type short_value_t = -32768;

// (2^16)-1
typedef unsigned short unsigned_short_type;
const unsigned_short_type unsigned_short_value_t = 65535;

// -(2^31)
typedef long long_type;
const long_type long_value_t = -2147483648;

// (2^32)-1
typedef unsigned long unsigned_long_type;
const unsigned_long_type unsigned_long_value_t = 4294967295;

// -(2^63)
typedef long long long_long_type;
const long_long_type long_long_value_t = -9223372036854775808;

// Java can't handle (2^63)+1. It will be converted to -((2^63)-1)
typedef unsigned long long unsigned_long_long_type1;
typedef unsigned_long_long_type1 unsigned_long_long_type2;
const unsigned_long_long_type2 unsigned_long_long_value_t = 9223372036854775809;

// enum type

enum Height { tall, dwarf };
typedef Height Height_type;
union HeightCount switch (Height_type) {
    case tall :
        unsigned long a;
    default :
        unsigned long b;
};
