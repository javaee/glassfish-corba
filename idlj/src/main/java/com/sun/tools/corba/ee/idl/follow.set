/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
 * Copyright (c) 1997-1998 IBM Corp. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

CORBA IDL
-----------------

<specification>      EOF

<specification'>     EOF

<definition>         EOF, typedef, struct, union, enum, const, exception, interface, module, }

<module>             ;

<module'>            }

<module''>           }

<interface>          ;

<interface'>         ;

<interface_dcl>      ;

<interface_body>     }

<interface_body'>    }

<export>             typedef, struct, union, enum, const, exception, readonly, attribute, oneway, float, double, long, short, unsigned, char, boolean, octet, any, string, id, ::, void, state, }

<state_def>          typedef, struct, union, enum, const, exception, readonly, attribute, oneway, float, double, long, short, unsigned, char, boolean, octet, any, string, id, ::, void, state, }

<state_def'>         }

<state_member>       private, protected, public, float, double, long, short, unsigned, char, boolean, octet, any, sequence, string, id, ::, struct, union, enum, }

<state_modifier>     float, double, long, short, unsigned, char, boolean, octet, any, sequence, string, id, ::, struct, union, enum

<inheritance_spec>   {

<inheritance_spec'>  {

<scoped_name>        ",", {, id, ::, literal, (, >, ), macroID

<scoped_name'>       ",", {, id, ::, literal, (, >, ), macroID

<const_dcl>          ;

<const_type>         id

<const_exp>          ;, ), >, ], :

<or_expr>            ;, ), >, ], :

<or_expr'>           ;, ), >, ], :

<xor_expr>           |, ;, ), >, ], :

<xor_expr'>          | ;, ), >, ], :

<and_expr>           ^, |, ;, ), >, ], :

<and_expr'>          ^, |, ;, ), >, ], :

<shift_expr>         &, ^, |, ;, ), >, ], :

<shift_expr'>        &, ^, |, ;, ), >, ], :

<add_expr>           >>, <<, &, ^, |, ;, ), >, ], :

<add_expr'>          >>, <<, &, ^, |, ;, ), >, ], :

<mult_expr>          >>, <<, &, ^, |, ;, ), >, ], :

<mult_expr'>         +, -, >>, <<, &, ^, |, ;, ), >, ], :

<unary_expr>         *, /, %, +, -, >>, <<, &, ^, |,  ;, ), >, ], :

<unary_operator>     id, ::, literal, (

<primary_expr>       *, /, %, +, -, >>, <<, &, ^, |,  ;, ), >, ], :

<literal>            *, /, %, +, -, >>, <<, &, ^, |,  ;, ), >, ], : (and , for string literal in <context_expr>)

<positive_int_const> >, ]

<type_dcl>           ;

<type_declarator>    ;

<type_spec>          id

<simple_type_spec>   id, ",", >

<base_type_spec>     id, ",", >, macroID

<template_type_spec> id, ",", >

<constr_type_spec>   id

<declarators>        ;

<declarators'>       ;

<declarator>         ",", ;

<declarator'>        ",", ;

<floating_pt_type>   id, ",", >, macroID

<integer_type>       id, ",", >, macroID, )

<signed_int>         id, ",", >, macroID, )

<unsigned_int>       id, ",", >, macroID, )

<char_type>          id, ",", >, macroID, )

<boolean_type>       id, ",", >, macroID, )

<octet_type>         id, ",", >, macroID

<any_type>           id, ",", >, macroID

<struct_type>        ;, id

<member_list>        }

<member_list'>       }

<member>             float, double, long, short, unsigned, char, boolean, octet, any, sequence, string, id, ::, struct, union, enum, }

<union_type>         ;, id

<switch_type_spec>   )

<switch_body>        }

<switch_body'>       }

<case>               case, default, }

<case'>              float, double, long, short, unsigned, char, boolean, octet, any, sequence, string, id, ::, struct, union, enum

<case_label>         case, default, float, double, long, short, unsigned, char, boolean, octet, any, sequence, string, id, ::, struct, union, enum

<element_spec>       ;

<enum_type>          ;, id, )

<enum_type'>         }

<sequence_type>      id, ",", >

<sequence_type'>     id, ",", >

<string_type>        id, ",", >, macroID

<string_type'>       id, ",", >, macroID

<fixed_array_size>   [, ",", ;

<attr_dcl>           ;

<attr_dcl'>          ;

<except_dcl>         ;

<except_dcl'>        }

<op_dcl>             ;

<op_dcl'>            ;

<op_dcl''>           ;

<op_dcl'''>          ;

<op_attribute>       float, double, long, short, unsigned, char, boolean, octet, any, string, id, ::, void

<op_type_spec>       id, macroID

<parameter_dcls>     raises, context, ;

<parameter_dcls'>    raises, context, ;

<parameter_dcls''>   )

<param_dcl>          , )

<param_attribute>    float, double, long, short, unsigned, char, boolean, octet, any, string, id, ::

<raises_expr>        context, ;

<raises_expr'>       )

<context_expr>       ;

<context_expr'>      )

<param_type_spec>    id, macroID

