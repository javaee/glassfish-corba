/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

// CosTransactions module as on 11/04/2000
// CORBAservices, Transaction Service V1.2 (RTF Working Draft)
// http://www.omg.org/cgi-bin/doc?ptc/00-09-04.pdf

#pragma prefix "omg.org"

#include <corba.idl>

module CosTransactions {

    // DATATYPES

    enum Status {
        StatusActive,
        StatusMarkedRollback,
        StatusPrepared,
        StatusCommitted,
        StatusRolledBack,
        StatusUnknown,
        StatusNoTransaction,
        StatusPreparing,
        StatusCommitting,
        StatusRollingBack
    };

    enum Vote {
        VoteCommit,
        VoteRollback,
        VoteReadOnly
    };

    // TransactionPolicyValue definitions are deprecated and replaced //
    // with new InvocationPolicy and OTSPolicy definitions. They are //
    // retained for backward compatibility.//
    // Commented out since J2EE does not need them.
    //typedef unsigned short TransactionPolicyValue;
    //const TransactionPolicyValue Allows_shared = 0;
    //const TransactionPolicyValue Allows_none = 1;
    //const TransactionPolicyValue Requires_shared = 2;
    //const TransactionPolicyValue Allows_unshared = 3;
    //const TransactionPolicyValue Allows_either = 4;
    //const TransactionPolicyValue Requires_unshared = 5;
    //const TransactionPolicyValue Requires_either = 6;

    // Forward references for interfaces defined later in module

    interface Current;
    interface TransactionFactory;
    interface Control;
    interface Terminator;
    interface Coordinator;
    interface RecoveryCoordinator;
    interface Resource;
    interface Synchronization;
    interface SubtransactionAwareResource;
    // TransactionalObject has been deprecated. See 10.3.10.
    interface TransactionalObject;

    // Structure definitions

    struct otid_t {
        long formatID; /*format identifier. 0 is OSI TP */
        long bqual_length;
        sequence <octet> tid;
    };

    struct TransIdentity {
        Coordinator coord;
        Terminator term;
        otid_t otid;
    };

    struct PropagationContext {
        unsigned long timeout;
        TransIdentity current;
        sequence <TransIdentity> parents;
        any implementation_specific_data;
    };

    // Heuristic exceptions

    exception HeuristicRollback {};
    exception HeuristicCommit {};
    exception HeuristicMixed {};
    exception HeuristicHazard {};

    // Other transaction-specific exceptions

    exception SubtransactionsUnavailable {};
    exception NotSubtransaction {};
    exception Inactive {};
    exception NotPrepared {};
    exception NoTransaction {};
    exception InvalidControl {};
    exception Unavailable {};
    exception SynchronizationUnavailable {};

    // Current transaction
    interface Current : CORBA::Current {
        void begin()
        raises(SubtransactionsUnavailable);
        void commit(in boolean report_heuristics)
            raises(
                NoTransaction,
                HeuristicMixed,
                HeuristicHazard
            );
        void rollback()
            raises(NoTransaction);
        void rollback_only()
            raises(NoTransaction);
        Status get_status();
        string get_transaction_name();
        void set_timeout(in unsigned long seconds);
        unsigned long get_timeout();
        Control get_control();
        Control suspend();
        void resume(in Control which)
            raises(InvalidControl);
    };

    interface TransactionFactory {
        Control create(in unsigned long time_out);
        Control recreate(in PropagationContext ctx);
    };

    interface Control {
        Terminator get_terminator()
            raises(Unavailable);
        Coordinator get_coordinator()
            raises(Unavailable);
    };

    interface Terminator {
        void commit(in boolean report_heuristics)
            raises(
                HeuristicMixed,
                HeuristicHazard
            );
        void rollback();
    };

    interface Coordinator {
        Status get_status();
        Status get_parent_status();
        Status get_top_level_status();
        boolean is_same_transaction(in Coordinator tc);
        boolean is_related_transaction(in Coordinator tc);
        boolean is_ancestor_transaction(in Coordinator tc);
        boolean is_descendant_transaction(in Coordinator tc);
        boolean is_top_level_transaction();
        unsigned long hash_transaction();
        unsigned long hash_top_level_tran();
        RecoveryCoordinator register_resource(in Resource r)
            raises(Inactive);
        void register_synchronization (in Synchronization sync)
            raises(Inactive, SynchronizationUnavailable);
        void register_subtran_aware(in SubtransactionAwareResource r)
            raises(Inactive, NotSubtransaction);
        void rollback_only()
            raises(Inactive);
        string get_transaction_name();
        Control create_subtransaction()
            raises(SubtransactionsUnavailable, Inactive);
        PropagationContext get_txcontext ()
            raises(Unavailable);
    };

    interface RecoveryCoordinator {
        Status replay_completion(in Resource r)
            raises(NotPrepared);
    };

    interface Resource {
        Vote prepare()
            raises(
                HeuristicMixed,
                HeuristicHazard
            );
        void rollback()
            raises(
                HeuristicCommit,
                HeuristicMixed,
                HeuristicHazard
            );
        void commit()
            raises(
                NotPrepared,
                HeuristicRollback,
                HeuristicMixed,
                HeuristicHazard
            );
        void commit_one_phase()
            raises(
                HeuristicHazard
            );
        void forget();
    };

    // TransactionalObject has been deprecated //
    // and replaced by the OTSPolicy component //
    // Synchronization will use the OTSPolicy of ADAPTS //
    // Inheritance from TransactionalObject is for backward compatability //
    interface Synchronization {
        void before_completion();
        void after_completion(in Status s);
    };

    interface SubtransactionAwareResource : Resource {
        void commit_subtransaction(in Coordinator parent);
        void rollback_subtransaction();
    };

    // TransactionalObject has been deprecated. See 10.3.10.
    interface TransactionalObject {
    };

    // TransactionPolicyType is deprecated and replaced //
    // by InvocationPolicyType and OTSPolicyType //
    // It is retained for backward compatibility. //
    // Commented out since J2EE does not need them.
    //typedef unsigned short TransactionPolicyValue;
    //const CORBA::PolicyType TransactionPolicyType = 46;
    //interface TransactionPolicy : CORBA::Policy {
    //    readonly attribute TransactionPolicyValue value;
    //};

    typedef unsigned short InvocationPolicyValue;
    const InvocationPolicyValue EITHER = 0;
    const InvocationPolicyValue SHARED = 1;
    const InvocationPolicyValue UNSHARED =2;

    typedef unsigned short OTSPolicyValue;
    const OTSPolicyValue REQUIRES = 1;
    const OTSPolicyValue FORBIDS =2;
    const OTSPolicyValue ADAPTS =3;

    typedef unsigned short NonTxTargetPolicyValue;
    const NonTxTargetPolicyValue PREVENT = 0;
    const NonTxTargetPolicyValue PERMIT = 1;
    const CORBA::PolicyType INVOCATION_POLICY_TYPE = 55;

    interface InvocationPolicy : CORBA::Policy {
        readonly attribute InvocationPolicyValue value;
    };

    const CORBA::PolicyType OTS_POLICY_TYPE = 56;
    interface OTSPolicy : CORBA::Policy {
        readonly attribute OTSPolicyValue value;
    };

    const CORBA::PolicyType NON_TX_TARGET_POLICY_TYPE = 57;
    interface NonTxTargetPolicy : CORBA::Policy {
        readonly attribute NonTxTargetPolicyValue value;
    };

}; // End of CosTransactions Module
