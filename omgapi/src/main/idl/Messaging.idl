/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

// File: Messaging.idl
// CORBA 3.0, Chapter 22

#ifndef _MESSAGING_IDL_
#define _MESSAGING_IDL_

#define _PRE_3_0_COMPILER_

#ifdef _PRE_3_0_COMPILER_
#pragma prefix "omg.org"
#include <corba.idl>
#include <Dynamic.idl>
#include <IOP.idl>
#include <TimeBase.idl>
#else
import ::CORBA;
import ::Dynamic;
import ::IOP;
import ::TimeBase;
#endif // _PRE_3_0_COMPILER_

// App developers should never have to use this IDL file. The ORB vendor
// should supply an implementation language version of this file, and
// that should be used by app developers if necessary.

// Most IDL compilers don't accept the "native" keyword in application IDL
//    files. In order to compile an IDL (really PIDL) file that has it, the
//    following trick can be used: change what the compiler sees. Instead
//    of letting the compiler see the keyword "native", use a preprocessor
//    definition that results in valid IDL, even if it doesn't yield
//    useful stubs and skeletons. Of course, PIDL never results in
//    the standard stubs so that's not a problem.
//
// Set the variable _MASK_NATIVE_ in the IDL compiler to enable it to
// parse this file.

#ifdef _MASK_NATIVE_
#define native typedef long
#endif // _MASK_NATIVE_

module Messaging {

#ifndef _PRE_3_0_COMPILER_
    typeprefix Messaging "omg.org";
#endif // _PRE_3_0_COMPILER_

    typedef short RebindMode;
    const RebindMode TRANSPARENT = 0;
    const RebindMode NO_REBIND = 1;
    const RebindMode NO_RECONNECT = 2;

    typedef short SyncScope;
    const SyncScope SYNC_NONE = 0;
    const SyncScope SYNC_WITH_TRANSPORT = 1;
    const SyncScope SYNC_WITH_SERVER = 2;
    const SyncScope SYNC_WITH_TARGET = 3;

    typedef short RoutingType;
    const RoutingType ROUTE_NONE = 0;
    const RoutingType ROUTE_FORWARD = 1;
    const RoutingType ROUTE_STORE_AND_FORWARD =2;

    typedef short Priority;

    typedef unsigned short Ordering;
    const Ordering ORDER_ANY = 0x01;
    const Ordering ORDER_TEMPORAL = 0x02;
    const Ordering ORDER_PRIORITY = 0x04;
    const Ordering ORDER_DEADLINE = 0x08;

    // Rebind Policy (default = TRANSPARENT)
    const CORBA::PolicyType REBIND_POLICY_TYPE = 23;

     interface RebindPolicy : CORBA::Policy {
        readonly attribute RebindMode rebind_mode;
    };

    // Synchronization Policy (default = SYNC_WITH_TRANSPORT)
    const CORBA::PolicyType SYNC_SCOPE_POLICY_TYPE = 24;

     interface SyncScopePolicy : CORBA::Policy {
        readonly attribute SyncScope synchronization;
    };

    // Priority Policies
    const CORBA::PolicyType REQUEST_PRIORITY_POLICY_TYPE = 25;

    struct PriorityRange {
        Priority min;
        Priority max;
    };

     interface RequestPriorityPolicy : CORBA::Policy {
        readonly attribute PriorityRange priority_range;
    };

    const CORBA::PolicyType REPLY_PRIORITY_POLICY_TYPE = 26;

    interface ReplyPriorityPolicy : CORBA::Policy {
        readonly attribute PriorityRange priority_range;
    };

    // Timeout Policies
    const CORBA::PolicyType REQUEST_START_TIME_POLICY_TYPE = 27;

     interface RequestStartTimePolicy : CORBA::Policy {
        readonly attribute TimeBase::UtcT start_time;
    };

    const CORBA::PolicyType REQUEST_END_TIME_POLICY_TYPE = 28;

     interface RequestEndTimePolicy : CORBA::Policy {
        readonly attribute TimeBase::UtcT end_time;
    };

    const CORBA::PolicyType REPLY_START_TIME_POLICY_TYPE = 29;

     interface ReplyStartTimePolicy : CORBA::Policy {
        readonly attribute TimeBase::UtcT start_time;
    };

    const CORBA::PolicyType REPLY_END_TIME_POLICY_TYPE = 30;

     interface ReplyEndTimePolicy : CORBA::Policy {
        readonly attribute TimeBase::UtcT end_time;
    };

    const CORBA::PolicyType RELATIVE_REQ_TIMEOUT_POLICY_TYPE = 31;

     interface RelativeRequestTimeoutPolicy : CORBA::Policy {
        readonly attribute TimeBase::TimeT relative_expiry;
    };

    const CORBA::PolicyType RELATIVE_RT_TIMEOUT_POLICY_TYPE = 32;

     interface RelativeRoundtripTimeoutPolicy : CORBA::Policy {
        readonly attribute TimeBase::TimeT relative_expiry;
    };

    const CORBA::PolicyType ROUTING_POLICY_TYPE = 33;

    struct RoutingTypeRange {
        RoutingType min;
        RoutingType max;
    };

     interface RoutingPolicy : CORBA::Policy {
        readonly attribute RoutingTypeRange routing_range;
    };

    const CORBA::PolicyType MAX_HOPS_POLICY_TYPE = 34;

     interface MaxHopsPolicy : CORBA::Policy {
        readonly attribute unsigned short max_hops;
    };

    // Router Delivery-ordering Policy (default = ORDER_TEMPORAL)
    const CORBA::PolicyType QUEUE_ORDER_POLICY_TYPE = 35;

     interface QueueOrderPolicy : CORBA::Policy {
        readonly attribute Ordering allowed_orders;
    };

    // Profile components through which policy values are expressed in IORs

    struct PolicyValue {
        CORBA::PolicyType ptype;
        sequence<octet> pvalue;
    };

    typedef sequence<PolicyValue> PolicyValueSeq;

#ifdef _SUPPORTS_NATIVE_
    native UserExceptionBase;
    valuetype ExceptionHolder {
      void raise_exception() raises (UserExceptionBase);
      void raise_exception_with_list(
	  in Dynamic::ExceptionList exc_list)
	raises (UserExceptionBase);
      private boolean is_system_exception;
      private boolean byte_order;
      private sequence<octet> marshaled_exception;
    };

    // For handling Routing
    interface ReplyHandler { };

    // Generic Poller Valuetype

    valuetype Poller : CORBA::Pollable {
        readonly attribute Object operation_target;
        readonly attribute string operation_name;
        attribute ReplyHandler associated_handler;
        readonly attribute boolean is_from_poller;
        private Object target;
        private string op_name;
    };
#endif
}; // module Messaging
#endif // _MESSAGING_IDL_
