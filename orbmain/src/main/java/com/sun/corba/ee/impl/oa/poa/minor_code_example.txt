#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2018 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

package @PKGNAME@ ;

import org.omg.CORBA.OMGVMCID ;
import org.omg.CORBA.CompletionStatus ;

import org.omg.CORBA.@SYSEX@ ; 

public abstract class StandardException {
    // @SYSEX@ BAD_CONTEXT

    public void IdlContextNotFound( CompletionStatus completed )
    {
        throw new BAD_CONTEXT( "IDL context not found", 
            OMGVMCID.value + 1, completed ) ;
    }

    public void IdlContextNotFound( )
    {
        IdlContextNotFound( CompletionStatus.COMPLETED_NO ) ;
    }

Data structures: list[ ... ] vector[ ... ] ( record )

list[ ( string{exception name} list[ ( string{code name} int{value} string{description} ] ) ]
                            
Processing:
    

    open file (fname)
        fr = new FileReader( fname )
        br = new BufferedReader( fr )
        br.readLine() returns null at EOF

    want a BufferedReader
    
    while not eol read line
        if (line start with spaces)
            add to current index
        else
            new exception

    create StandardException class

    foreach ( excname vec ) in data
        add import statement for execname to output 

        foreach ( codename value descr ) in vec 
            generate full method
            generate short method
        
           
(define (read-file fname)
    (begin
        (let port (open-input-port fname))
        (let obj  (read port))
        obj
    )
)

    
    
